import time


# to print the fucking board
def print_board(b):
    print('# 1 2 3 - x')
    for i in range(3):
        print(i + 1, " ".join(b[i]))
    print('|\ny\n')

    time.sleep(0.25)


# get the coordinates for where to place in a turn
def placement(player):
    print(f"player {player} turn")

    try:
        y, x = int(input("enter the y coordinate: ")), int(input("enter the x coordinate: "))
    except ValueError:
        print("error, please enter numbers and not letters and symbols")
        return "error"

    return y, x


# check the asked place is valid
def valid_place(y, x, main_board, player):
    if y > 0 and x > 0:
        y, x = y - 1, x - 1
    else:
        print("error, please enter numbers in range of 1 to 3")
        return "error"

    try:
        if main_board[y][x] == '-':
            if player == 1:
                main_board[y][x] = 'X'
            elif player == 2:
                main_board[y][x] = 'O'
        else:
            print("error, spot has already been taken")
            return "error"
    except IndexError:
        print("error, please enter numbers in range of 1 to 3")
        return "error"

    return "valid"


# to check what the player will do in his turn
def turn(player, main_board):
    place = placement(player)

    if place != "error":
        y, x = place
    else:
        return "error"

    if valid_place(y, x, main_board, player) == "error":
        return "error"

    return "done"


# checking if a row is all the same
def check_same(lst):
    first_element = lst[0]
    return all(element == first_element for element in lst)


# converting X into 1, O into 2, '-' will stay same
def convert_symbol(symbol):
    if symbol == 'X':
        return 1
    elif symbol == 'O':
        return 2

    return '-'


# row check for straight line check
def row_check(board, row, i, j):
    if board[i][j] != '-':
        row[j] = board[i][j]

        if check_same(row):
            symbol = convert_symbol(row[0])

            return symbol

    return "invalid"


# columns check for straight line check
def columns_check(board, column, i, j):
    if board[j][i] != '-':
        column[j] = board[j][i]

        if check_same(column):
            symbol = convert_symbol(column[0])

            return symbol

    return "invalid"


# check the straight lines in the board
def straight_line_check(board):
    row = ['', '', '']
    column = ['', '', '']

    for i in range(3):
        for j in range(3):

            if row_check(board, row, i, j) != "invalid":
                return row_check(board, row, i, j)

            if columns_check(board, column, i, j) != "invalid":
                return columns_check(board, column, i, j)

    return "invalid"


# check diagonal lines in the board
def diagonal_line_check(m):
    symbol = m[0][0]
    diagonal_1 = True
    for i in range(1, len(m)):
        if m[i][i] != symbol or symbol == '-':
            diagonal_1 = False
            break

    symbol = convert_symbol(symbol)

    if diagonal_1:
        return symbol

    symbol = m[0][len(m) - 1]
    diagonal_2 = True
    for i in range(len(m) - 2, -1, -1):
        if m[len(m) - i - 1][i] != symbol or symbol == '-':
            diagonal_2 = False
            break

    symbol = convert_symbol(symbol)

    if diagonal_2:
        return symbol

    return "invalid"


# checks if there's a tie in the game
def tie_check(m):
    for r1 in m:
        for r2 in r1:
            if r2 == '-':
                return "invalid"

    return "valid"


# check if there's a winner
def winner_check(m):
    if straight_line_check(m) != "invalid":
        return straight_line_check(m)
    elif diagonal_line_check(m) != "invalid":
        return diagonal_line_check(m)
    elif tie_check(m) == "valid":
        return "tie"

    return "non"


# the main game code
def main_game(player, main_board, counter):
    if turn(player, main_board) == "error":
        counter += 1
    else:
        player = 3 - player

    print_board(main_board)

    if winner_check(main_board) != "non" and winner_check(main_board) != "tie":
        print(f"player {winner_check(main_board)} won")
        return "game over"
    elif winner_check(main_board) == "tie":
        print("tie")
        return "game over"
    else:
        return player, main_board, counter


# main fucking code
def main():
    counter = 0

    player = 1

    # change the start position to test different things
    main_board = [
        ['-', '-', '-'],
        ['-', '-', '-'],
        ['-', '-', '-']
    ]

    print_board(main_board)

    while True:
        if counter == 3:
            print("you have entered 3 times invalid input, the game will now be stopped")
            return 0

        game = main_game(player, main_board, counter)

        if game != "game over":
            player, main_board, counter = game
        else:
            return 0


main()
